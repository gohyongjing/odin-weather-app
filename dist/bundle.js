(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([e.id,'* {\n    border-radius: 10px;\n    font-size: 30px;\n}\n\n.content {\n    border: 2px solid yellow;\n    padding: 20px;\n    background-color: lightyellow;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\nform {\n    border: 2px solid blue;\n    background-color: skyblue;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 10px;\n}\n\n.weather {\n    padding: 10px;\n    border: 2px solid darksalmon;\n    background-color: salmon;\n}\n\n.weather div {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n}\n\n.weather > div:first-child {\n    font-size: 34px;\n    font-weight: 600;\n}\n\n.weather div > input[type="button"] {\n    border: 2px solid darksalmon;\n    background-color: pink;\n}\n\n.weather div > input[type="button"]:hover {\n    background-color: darksalmon;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,mBAAmB;IACnB,eAAe;AACnB;;AAEA;IACI,wBAAwB;IACxB,aAAa;IACb,6BAA6B;IAC7B,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,sBAAsB;IACtB,yBAAyB;IACzB,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;AACb;;AAEA;IACI,aAAa;IACb,4BAA4B;IAC5B,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,QAAQ;AACZ;;AAEA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,4BAA4B;IAC5B,sBAAsB;AAC1B;;AAEA;IACI,4BAA4B;AAChC",sourcesContent:['* {\n    border-radius: 10px;\n    font-size: 30px;\n}\n\n.content {\n    border: 2px solid yellow;\n    padding: 20px;\n    background-color: lightyellow;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n}\n\nform {\n    border: 2px solid blue;\n    background-color: skyblue;\n    padding: 20px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 10px;\n}\n\n.weather {\n    padding: 10px;\n    border: 2px solid darksalmon;\n    background-color: salmon;\n}\n\n.weather div {\n    display: flex;\n    align-items: center;\n    gap: 5px;\n}\n\n.weather > div:first-child {\n    font-size: 34px;\n    font-weight: 600;\n}\n\n.weather div > input[type="button"] {\n    border: 2px solid darksalmon;\n    background-color: pink;\n}\n\n.weather div > input[type="button"]:hover {\n    background-color: darksalmon;\n}'],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([a]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var a={},i=[],c=0;c<e.length;c++){var d=e[c],s=r.base?d[0]+r.base:d[0],l=a[s]||0,p="".concat(s," ").concat(l);a[s]=l+1;var u=t(p),A={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)n[u].references++,n[u].updater(A);else{var m=o(A,r);r.byIndex=c,n.splice(c,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function o(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=t(a[i]);n[c].references--}for(var d=r(e,o),s=0;s<a.length;s++){var l=t(a[s]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=d}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var o=n[r];if(void 0!==o)return o.exports;var a=n[r]={id:r,exports:{}};return e[r](a,a.exports,t),a.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{const e=(()=>{function e(e){return e-273.15}function n(n){return n.json().then((n=>{const t=[];return t.cityName=n.name,t.mainWeather=n.weather[0].main,t.weatherDescription=n.weather[0].description,t.temperature=e(n.main.temp),t.feelsLike=e(n.main.feels_like),t.pressure=n.main.pressure,t.humidity=n.main.humidity,t})).catch(t)}function t(e){return console.log(e),null}return{getWeather:function(e="Singapore,sg"){return fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&APPID=d3d83fbc7cd370385cd75c9f3c64ea18`,{mode:"cors"}).then(n)},convertCelsiusToFarenheit:function(e){return 1.8*e+32}}})(),n=(()=>{const n=document.querySelector("body"),t=document.createElement("div"),r=document.createElement("form"),o=document.createElement("label"),a=document.createElement("input"),i=document.createElement("input"),c=document.createElement("div"),d=document.createElement("div"),s=document.createElement("div"),l=document.createElement("div"),p=document.createElement("div"),u=document.createElement("div"),A=document.createElement("div"),m=document.createElement("div");function f(n){p.innerHTML="",n.then((n=>{if(null!==n){const t=document.createElement("div"),r=document.createElement("input");d.innerText=n.cityName,s.innerText=n.mainWeather,l.innerText=n.weatherDescription,t.innerText=`Temp: ${n.temperature.toFixed(2)}`,r.type="button",r.value="°C",r.addEventListener("click",(o=>{"°C"===r.value?(t.innerText=`Temp: ${e.convertCelsiusToFarenheit(n.temperature).toFixed(2)}`,r.value="°F",u.innerText=`Feels like: ${e.convertCelsiusToFarenheit(n.feelsLike).toFixed(2)} °C`):(t.innerText=`Temp: ${n.temperature.toFixed(2)}`,r.value="°C",u.innerText=`Feels like: ${n.feelsLike.toFixed(2)} °C`)})),p.appendChild(t),p.appendChild(r),u.innerText=`Feels like: ${n.feelsLike.toFixed(2)} °C`,A.innerText=`Pressure: ${n.pressure} hPa`,m.innerText=`Humidity: ${n.humidity}%`}else d.innerText="",s.innerText="",l.innerText='City not found, please enter "City", "City,State" or "City,Country"',u.innerText="",A.innerText="",m.innerText=""}))}return{displayWebPage:function(){o.innerText="Enter city",o.for="city",a.id="city",i.type="button",i.value="Get Weather!",i.addEventListener("click",(n=>{f(e.getWeather(a.value))})),r.appendChild(o),r.appendChild(a),r.appendChild(i),t.classList.add("content"),t.appendChild(r),c.classList.add("weather"),c.appendChild(d),c.appendChild(s),c.appendChild(l),c.appendChild(p),c.appendChild(u),c.appendChild(A),c.appendChild(m),t.appendChild(c),n.appendChild(t),f(e.getWeather("Singapore,sg"))}}})().displayWebPage;var r=t(379),o=t.n(r),a=t(795),i=t.n(a),c=t(569),d=t.n(c),s=t(565),l=t.n(s),p=t(216),u=t.n(p),A=t(589),m=t.n(A),f=t(426),h={};h.styleTagTransform=m(),h.setAttributes=l(),h.insert=d().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=u(),o()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals,n()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,